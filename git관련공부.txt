git status : 현재 깃의 상태를 말해줌
git add . : 모든파일을 스테이징 해주기
# git diff -> 약간 쓰레기 같다고 생각하면됨
# git difftool -> 시각적으로 더 눈에 잘보임. vim 에디터로 차이점을 보여줌
git branch 브랜치명 : 브랜치 생성해줌
git switch 브랜치명 : 브랜치로 이동

git log --oneline --all --graph : 현재까지의 로그를 어느정도 시각화해서 보여줌
메인으로가서 git merge 합칠브랜치명
충돌 해결은 코드수정 후 git add & git commit

## 시각적으로 깔끔하게 보이게 할때 사용하는 방법들
git rebase 중심브랜치명 : 새로운 브랜치를 main의 최신 commit으로 이동
git merge 새로운 브랜치명 : fast forward merge가 이루어짐
혹은
git merge --squash 새브랜치 : 곁다리로 개발한 브랜치에서의 개발을 새로운 커밋으로 정리해서 main브랜치에 커밋한걸로 표현. 
 * main 브랜치 log를 봤을때 깔끔하게 한줄로 나오게 할때(비쥬얼적인 이유가 강함)

 스쿼시 몬지 기억이 잘안남
 이번에는 rebase를 실험해보겠음 : 현재 메인브랜치에서 작성함



이번엔 진짜 rebase브랜치에서 작성???
rebase테스트를 위해서 한줄 더 작성함
